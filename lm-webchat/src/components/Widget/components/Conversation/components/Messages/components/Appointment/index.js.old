import 'react-big-calendar/lib/css/react-big-calendar.css';
import 'react-big-calendar/lib/addons/dragAndDrop/styles.less';
import { PROP_TYPES } from 'constants';
import { connect } from 'react-redux';
import withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';
import React from 'react';
import moment from 'moment';
import BigCalendar from 'react-big-calendar';
import { getEvents } from './googleCalendar';
import { emitUserMessage, toggleInputDisabled } from 'actions';


moment.locale('zh-cn');
const localizer = BigCalendar.momentLocalizer(moment);
const DragAndDropCalendar = withDragAndDrop(BigCalendar);
// const localizer = BigCalendar.globalizeLocalizer(globalize);

// this weird syntax is just a shorthand way of specifying loaders

class Appointment extends React.Component {
 constructor(props) {
   super(props);
   this.state = {
     events: []
   };
   this.handleClick = this.handleClick.bind(this);
   this.moveEvent = this.moveEvent.bind(this);
   this.newEvent = this.newEvent.bind(this);
 }

 componentDidMount() {
   getEvents((events) => {
     this.setState({ events });
   });
 }

 componentDidUpdate() {
   getEvents((events) => {
     this.setState({ events });
   });
 }

 handleClick() {
   const payload = '/comfirm_lm_appointment';
   this.props.submitAppointment(payload);
 }
 moveEvent({ event, start, end, isAllDay: droppedOnAllDaySlot }) {
   const { events } = this.state;

   const idx = events.indexOf(event);
   let allDay = event.allDay;

   if (!event.allDay && droppedOnAllDaySlot) {
     allDay = true;
   } else if (event.allDay && !droppedOnAllDaySlot) {
     allDay = false;
   }

   const updatedEvent = { ...event, start, end, allDay };

   const nextEvents = [...events];
   nextEvents.splice(idx, 1, updatedEvent);

   this.setState({
     events: nextEvents
   });

   // alert(`${event.title} was dropped onto ${updatedEvent.start}`)
 }

 resizeEvent = ({ event, start, end }) => {
   const { events } = this.state;

   const nextEvents = events.map(existingEvent => {
     return existingEvent.id === event.id
       ? { ...existingEvent, start, end }
       : existingEvent;
   });

   this.setState({
     events: nextEvents
   });

   //alert(`${event.title} was resized to ${start}-${end}`)
 }
 newEvent(event) {
   const idList = this.state.events.map(a => a.id);
   const newId = Math.max(...idList) + 1;
   const hour = {
     id: newId,
     title: 'New Event',
     allDay: event.slots.length === 1,
     start: event.start,
     end: event.end
   };
   this.setState({
     events: this.state.events.concat([hour])
   });
 }
 render() {
   return (
     // React Components in JSX look like HTML tags
     <div className="appointment">
       <DragAndDropCalendar
         style={{ height: '420px' }}
         selectable
         onEventDrop={this.moveEvent}
         resizable
         onEventResize={this.resizeEvent}
         onSelectSlot={this.newEvent}
         localizer={localizer}
         defaultView={BigCalendar.Views.WEEK}
         // timeslots={4}
         events={this.state.events}
       />
       <input type="submit" value="提交" onClick={this.handleClick} />
     </div>
   );
 }
}

const mapStateToProps = state => ({
 inputState: state.behavior.get('disabledInput')
});

const mapDispatchToProps = dispatch => ({
 // toggleInputDisabled: _ => dispatch(toggleInputDisabled()),
 submitAppointment: (payload) => {
   dispatch(emitUserMessage(payload));
   dispatch(toggleInputDisabled());
 }
});

Appointment.propTypes = {
 message: PROP_TYPES.APPOINTMENT
};

export default connect(mapStateToProps, mapDispatchToProps)(Appointment);


